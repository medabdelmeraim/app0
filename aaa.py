{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "30d9cdc2",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-04-18 01:01:10.137 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\mohammed\\AppData\\Roaming\\Python\\Python312\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "2025-04-18 01:01:10.157 Session state does not function when running a script without `streamlit run`\n"
     ]
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import numpy as np\n",
    "from PIL import Image\n",
    "import io\n",
    "import datetime\n",
    "import pandas as pd\n",
    "import random\n",
    "\n",
    "# Configure the page\n",
    "st.set_page_config(page_title=\"ID Verification System\", layout=\"wide\")\n",
    "\n",
    "# Add custom CSS\n",
    "st.markdown(\"\"\"\n",
    "<style>\n",
    ".main-header {\n",
    "    font-size: 36px;\n",
    "    font-weight: bold;\n",
    "    color: #1E3A8A;\n",
    "    text-align: center;\n",
    "    margin-bottom: 30px;\n",
    "}\n",
    ".success-message {\n",
    "    background-color: #d1fae5;\n",
    "    padding: 20px;\n",
    "    border-radius: 10px;\n",
    "    border: 1px solid #34d399;\n",
    "}\n",
    ".error-message {\n",
    "    background-color: #fee2e2;\n",
    "    padding: 20px;\n",
    "    border-radius: 10px;\n",
    "    border: 1px solid #f87171;\n",
    "}\n",
    "</style>\n",
    "\"\"\", unsafe_allow_html=True)\n",
    "\n",
    "st.markdown('<p class=\"main-header\">Biometric ID Verification System</p>', unsafe_allow_html=True)\n",
    "\n",
    "# Sidebar for app navigation\n",
    "with st.sidebar:\n",
    "    st.title(\"Navigation\")\n",
    "    app_mode = st.radio(\"Choose Mode\", [\"Home\", \"Upload ID\", \"Verify Identity\", \"Verification History\"])\n",
    "\n",
    "# Initialize session state\n",
    "if 'has_id' not in st.session_state:\n",
    "    st.session_state.has_id = False\n",
    "if 'id_image' not in st.session_state:\n",
    "    st.session_state.id_image = None\n",
    "if 'name' not in st.session_state:\n",
    "    st.session_state.name = \"\"\n",
    "if 'age' not in st.session_state:\n",
    "    st.session_state.age = 18\n",
    "if 'id_number' not in st.session_state:\n",
    "    st.session_state.id_number = \"\"\n",
    "if 'address' not in st.session_state:\n",
    "    st.session_state.address = \"\"\n",
    "if 'verification_history' not in st.session_state:\n",
    "    st.session_state.verification_history = []\n",
    "\n",
    "# Home page\n",
    "def show_home():\n",
    "    st.header(\"Welcome to the Biometric ID Verification System\")\n",
    "    \n",
    "    col1, col2 = st.columns([3, 2])\n",
    "    \n",
    "    with col1:\n",
    "        st.subheader(\"How it works\")\n",
    "        st.write(\"\"\"\n",
    "        This application allows you to verify your identity using facial recognition technology.\n",
    "        \n",
    "        **Step 1:** Upload your ID card in the 'Upload ID' section\n",
    "        \n",
    "        **Step 2:** Provide your personal information\n",
    "        \n",
    "        **Step 3:** Use the 'Verify Identity' section to capture your face and validate your identity\n",
    "        \n",
    "        **Step 4:** View your verification history at any time\n",
    "        \"\"\")\n",
    "        \n",
    "        st.info(\"Your biometric data is securely stored and only used for verification purposes.\")\n",
    "    \n",
    "    with col2:\n",
    "        st.write(\"Biometric Verification System\")\n",
    "\n",
    "# Upload ID page\n",
    "def upload_id():\n",
    "    st.header(\"Upload ID Card\")\n",
    "    \n",
    "    col1, col2 = st.columns([2, 3])\n",
    "    \n",
    "    with col1:\n",
    "        st.subheader(\"Upload your ID document\")\n",
    "        id_file = st.file_uploader(\"Choose an image file\", type=[\"jpg\", \"jpeg\", \"png\"])\n",
    "    \n",
    "    with col2:\n",
    "        if id_file is not None:\n",
    "            # Display the uploaded image\n",
    "            image = Image.open(id_file)\n",
    "            st.image(image, caption=\"Uploaded ID\", width=400)\n",
    "            \n",
    "            st.subheader(\"Enter ID Information\")\n",
    "            \n",
    "            col_a, col_b = st.columns(2)\n",
    "            \n",
    "            with col_a:\n",
    "                name = st.text_input(\"Full Name\")\n",
    "                age = st.number_input(\"Age\", min_value=18, max_value=100, value=25)\n",
    "            \n",
    "            with col_b:\n",
    "                id_number = st.text_input(\"ID Number\")\n",
    "                issue_date = st.date_input(\"Issue Date\")\n",
    "            \n",
    "            address = st.text_area(\"Address\", height=100)\n",
    "            \n",
    "            # Convert image to bytes for storage\n",
    "            buf = io.BytesIO()\n",
    "            image.save(buf, format=\"JPEG\")\n",
    "            id_image_bytes = buf.getvalue()\n",
    "            \n",
    "            if st.button(\"Save ID Information\", use_container_width=True):\n",
    "                # Store in session state\n",
    "                st.session_state.id_image = id_image_bytes\n",
    "                st.session_state.name = name\n",
    "                st.session_state.age = age\n",
    "                st.session_state.id_number = id_number\n",
    "                st.session_state.address = address\n",
    "                st.session_state.issue_date = issue_date\n",
    "                st.session_state.has_id = True\n",
    "                \n",
    "                # In a real app, we would extract the face from the ID here\n",
    "                # Since we don't have OpenCV, we'll just simulate this step\n",
    "                \n",
    "                success_html = \"\"\"\n",
    "                <div class=\"success-message\">\n",
    "                    <h3>✅ ID information saved successfully!</h3>\n",
    "                    <p>Your ID has been processed. You can now proceed to the verification step.</p>\n",
    "                </div>\n",
    "                \"\"\"\n",
    "                st.markdown(success_html, unsafe_allow_html=True)\n",
    "\n",
    "# Verify identity page\n",
    "def verify_identity():\n",
    "    st.header(\"Identity Verification\")\n",
    "    \n",
    "    # Check if ID has been uploaded\n",
    "    if not st.session_state.get('has_id', False):\n",
    "        st.warning(\"Please upload your ID first in the 'Upload ID' section\")\n",
    "        if st.button(\"Go to Upload ID\"):\n",
    "            st.session_state.app_mode = \"Upload ID\"\n",
    "            st.experimental_rerun()\n",
    "        return\n",
    "    \n",
    "    col1, col2 = st.columns([1, 1])\n",
    "    \n",
    "    with col1:\n",
    "        # Display stored ID\n",
    "        st.subheader(\"Your ID Information\")\n",
    "        id_image = Image.open(io.BytesIO(st.session_state.id_image))\n",
    "        st.image(id_image, caption=\"Your ID\", width=300)\n",
    "        \n",
    "        st.write(f\"**Name:** {st.session_state.name}\")\n",
    "        st.write(f\"**ID Number:** {st.session_state.id_number}\")\n",
    "        st.write(f\"**Age:** {st.session_state.age}\")\n",
    "    \n",
    "    with col2:\n",
    "        st.subheader(\"Live Verification\")\n",
    "        # Option to capture from webcam\n",
    "        picture = st.camera_input(\"Take a picture for verification\")\n",
    "        \n",
    "        if picture is not None:\n",
    "            # Display the captured image\n",
    "            image = Image.open(picture)\n",
    "            st.image(image, caption=\"Your Photo\", width=300)\n",
    "            \n",
    "            # Simulate verification (randomly succeed 70% of the time)\n",
    "            verification_result = random.random() > 0.3\n",
    "            confidence = random.uniform(0.65, 0.95) if verification_result else random.uniform(0.3, 0.6)\n",
    "            confidence_percentage = f\"{confidence * 100:.2f}%\"\n",
    "            \n",
    "            # Store verification time\n",
    "            verification_time = datetime.datetime.now()\n",
    "            \n",
    "            # Save to history\n",
    "            history_entry = {\n",
    "                \"timestamp\": verification_time.strftime(\"%Y-%m-%d %H:%M:%S\"),\n",
    "                \"name\": st.session_state.name,\n",
    "                \"id_number\": st.session_state.id_number,\n",
    "                \"result\": \"Success\" if verification_result else \"Failed\",\n",
    "                \"confidence\": confidence_percentage\n",
    "            }\n",
    "            \n",
    "            st.session_state.verification_history.append(history_entry)\n",
    "            \n",
    "            # Display verification result\n",
    "            if verification_result:\n",
    "                success_html = f\"\"\"\n",
    "                <div class=\"success-message\">\n",
    "                    <h3>✅ Verification Successful!</h3>\n",
    "                    <p>Face matches ID with {confidence_percentage} confidence.</p>\n",
    "                    <p><b>Name:</b> {st.session_state.name}<br>\n",
    "                    <b>ID:</b> {st.session_state.id_number}<br>\n",
    "                    <b>Verified at:</b> {verification_time.strftime(\"%Y-%m-%d %H:%M:%S\")}</p>\n",
    "                </div>\n",
    "                \"\"\"\n",
    "                st.markdown(success_html, unsafe_allow_html=True)\n",
    "            else:\n",
    "                error_html = f\"\"\"\n",
    "                <div class=\"error-message\">\n",
    "                    <h3>❌ Verification Failed!</h3>\n",
    "                    <p>Face does not match ID. Confidence: {confidence_percentage}</p>\n",
    "                    <p>Please try again or contact support if you believe this is an error.</p>\n",
    "                </div>\n",
    "                \"\"\"\n",
    "                st.markdown(error_html, unsafe_allow_html=True)\n",
    "\n",
    "# Verification history page\n",
    "def show_history():\n",
    "    st.header(\"Verification History\")\n",
    "    \n",
    "    if not st.session_state.verification_history:\n",
    "        st.info(\"No verification history available yet. Complete a verification to see records here.\")\n",
    "        return\n",
    "    \n",
    "    # Display history in a table\n",
    "    history = st.session_state.verification_history\n",
    "    \n",
    "    # Create a DataFrame\n",
    "    df = pd.DataFrame(history)\n",
    "    \n",
    "    # Display the dataframe\n",
    "    st.dataframe(df)\n",
    "    \n",
    "    # Option to clear history\n",
    "    if st.button(\"Clear History\"):\n",
    "        st.session_state.verification_history = []\n",
    "        st.success(\"History cleared successfully!\")\n",
    "        st.experimental_rerun()\n",
    "\n",
    "# Route to the right page based on selection\n",
    "if app_mode == \"Home\":\n",
    "    show_home()\n",
    "elif app_mode == \"Upload ID\":\n",
    "    upload_id()\n",
    "elif app_mode == \"Verify Identity\":\n",
    "    verify_identity()\n",
    "elif app_mode == \"Verification History\":\n",
    "    show_history()\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "import streamlit as st\n",
    "import numpy as np\n",
    "from PIL import Image\n",
    "import io\n",
    "import datetime\n",
    "import pandas as pd\n",
    "\n",
    "\n",
    "# Configure the page\n",
    "st.set_page_config(page_title=\"ID Verification System\", layout=\"wide\")\n",
    "\n",
    "# Add custom CSS\n",
    "st.markdown(\"\"\"\n",
    "<style>\n",
    ".main-header {\n",
    "    font-size: 36px;\n",
    "    font-weight: bold;\n",
    "    color: #1E3A8A;\n",
    "    text-align: center;\n",
    "    margin-bottom: 30px;\n",
    "}\n",
    ".success-message {\n",
    "    background-color: #d1fae5;\n",
    "    padding: 20px;\n",
    "    border-radius: 10px;\n",
    "    border: 1px solid #34d399;\n",
    "}\n",
    ".error-message {\n",
    "    background-color: #fee2e2;\n",
    "    padding: 20px;\n",
    "    border-radius: 10px;\n",
    "    border: 1px solid #f87171;\n",
    "}\n",
    "</style>\n",
    "\"\"\", unsafe_allow_html=True)\n",
    "\n",
    "st.markdown('<p class=\"main-header\">Biometric ID Verification System</p>', unsafe_allow_html=True)\n",
    "\n",
    "# Mock face recognition functions since we're simplifying\n",
    "def detect_faces(image_array):\n",
    "    # This is a mock function - in a real app you'd use face_recognition library\n",
    "    # For demo purposes, we'll assume a face is always detected\n",
    "    return [(50, 150, 150, 50)]  # Format: (top, right, bottom, left)\n",
    "\n",
    "def compare_faces(stored_encoding, live_encoding, tolerance=0.6):\n",
    "    # Mock function - in a real app this would do actual comparison\n",
    "    # For demo, we'll return a random result with higher probability of success\n",
    "    import random\n",
    "    return [random.random() > 0.3]  # 70% chance of success\n",
    "\n",
    "def face_distance(stored_encoding, live_encoding):\n",
    "    # Mock function - returns a fake distance\n",
    "    import random\n",
    "    return [random.uniform(0.3, 0.7)]\n",
    "\n",
    "# Sidebar for app navigation\n",
    "with st.sidebar:\n",
    "    st.title(\"Navigation\")\n",
    "    app_mode = st.radio(\"Choose Mode\", [\"Home\", \"Upload ID\", \"Verify Identity\", \"Verification History\"])\n",
    "\n",
    "# Initialize session state\n",
    "if 'has_id' not in st.session_state:\n",
    "    st.session_state.has_id = False\n",
    "if 'id_image' not in st.session_state:\n",
    "    st.session_state.id_image = None\n",
    "if 'name' not in st.session_state:\n",
    "    st.session_state.name = \"\"\n",
    "if 'age' not in st.session_state:\n",
    "    st.session_state.age = 18\n",
    "if 'id_number' not in st.session_state:\n",
    "    st.session_state.id_number = \"\"\n",
    "if 'address' not in st.session_state:\n",
    "    st.session_state.address = \"\"\n",
    "if 'verification_history' not in st.session_state:\n",
    "    st.session_state.verification_history = []\n",
    "\n",
    "# Home page\n",
    "def show_home():\n",
    "    st.header(\"Welcome to the Biometric ID Verification System\")\n",
    "    \n",
    "    col1, col2 = st.columns([3, 2])\n",
    "    \n",
    "    with col1:\n",
    "        st.subheader(\"How it works\")\n",
    "        st.write(\"\"\"\n",
    "        This application allows you to verify your identity using facial recognition.\n",
    "        \n",
    "        **Step 1:** Upload your ID card in the 'Upload ID' section\n",
    "        \n",
    "        **Step 2:** Provide your personal information\n",
    "        \n",
    "        **Step 3:** Use the 'Verify Identity' section to capture your face and validate your identity\n",
    "        \n",
    "        **Step 4:** View your verification history at any time\n",
    "        \"\"\")\n",
    "        \n",
    "        st.info(\"Your biometric data is securely stored and only used for verification purposes.\")\n",
    "    \n",
    "    with col2:\n",
    "        st.image(\"https://via.placeholder.com/400x300?text=Biometric+Verification\", width=300)\n",
    "\n",
    "# Upload ID page\n",
    "def upload_id():\n",
    "    st.header(\"Upload ID Card\")\n",
    "    \n",
    "    col1, col2 = st.columns([2, 3])\n",
    "    \n",
    "    with col1:\n",
    "        st.subheader(\"Upload your ID document\")\n",
    "        id_file = st.file_uploader(\"Choose an image file\", type=[\"jpg\", \"jpeg\", \"png\"])\n",
    "    \n",
    "    with col2:\n",
    "        if id_file is not None:\n",
    "            # Save ID info in session state\n",
    "            image = Image.open(id_file)\n",
    "            st.image(image, caption=\"Uploaded ID\", width=400)\n",
    "            \n",
    "            st.subheader(\"Enter ID Information\")\n",
    "            \n",
    "            col_a, col_b = st.columns(2)\n",
    "            \n",
    "            with col_a:\n",
    "                name = st.text_input(\"Full Name\")\n",
    "                age = st.number_input(\"Age\", min_value=18, max_value=100, value=25)\n",
    "            \n",
    "            with col_b:\n",
    "                id_number = st.text_input(\"ID Number\")\n",
    "                issue_date = st.date_input(\"Issue Date\")\n",
    "            \n",
    "            address = st.text_area(\"Address\", height=100)\n",
    "            \n",
    "            # Convert image to bytes for storage\n",
    "            buf = io.BytesIO()\n",
    "            image.save(buf, format=\"JPEG\")\n",
    "            id_image_bytes = buf.getvalue()\n",
    "            \n",
    "            if st.button(\"Save ID Information\", use_container_width=True):\n",
    "                # Store in session state\n",
    "                st.session_state.id_image = id_image_bytes\n",
    "                st.session_state.name = name\n",
    "                st.session_state.age = age\n",
    "                st.session_state.id_number = id_number\n",
    "                st.session_state.address = address\n",
    "                st.session_state.issue_date = issue_date\n",
    "                \n",
    "                # In a real app, we would detect faces in the ID\n",
    "                st.session_state.has_id = True\n",
    "                \n",
    "                # Mock face encoding (in real app this would be actual face data)\n",
    "                st.session_state.id_encoding = [0.1, 0.2, 0.3, 0.4]  # Fake encoding\n",
    "                \n",
    "                success_html = \"\"\"\n",
    "                <div class=\"success-message\">\n",
    "                    <h3>✅ ID and face information saved successfully!</h3>\n",
    "                    <p>Your ID has been processed and your face has been detected. You can now proceed to the verification step.</p>\n",
    "                </div>\n",
    "                \"\"\"\n",
    "                st.markdown(success_html, unsafe_allow_html=True)\n",
    "\n",
    "# Verify identity page\n",
    "def verify_identity():\n",
    "    st.header(\"Identity Verification\")\n",
    "    \n",
    "    # Check if ID has been uploaded\n",
    "    if 'id_image' not in st.session_state or not st.session_state.get('has_id', False):\n",
    "        st.warning(\"Please upload your ID first in the 'Upload ID' section\")\n",
    "        return\n",
    "    \n",
    "    col1, col2 = st.columns([1, 1])\n",
    "    \n",
    "    with col1:\n",
    "        # Display stored ID\n",
    "        st.subheader(\"Your ID Information\")\n",
    "        id_image = Image.open(io.BytesIO(st.session_state.id_image))\n",
    "        st.image(id_image, caption=\"Your ID\", width=300)\n",
    "        \n",
    "        st.write(f\"**Name:** {st.session_state.name}\")\n",
    "        st.write(f\"**ID Number:** {st.session_state.id_number}\")\n",
    "        st.write(f\"**Age:** {st.session_state.age}\")\n",
    "    \n",
    "    with col2:\n",
    "        st.subheader(\"Live Verification\")\n",
    "        # Option to capture from webcam\n",
    "        picture = st.camera_input(\"Take a picture for verification\")\n",
    "        \n",
    "        if picture is not None:\n",
    "            # Process the captured image\n",
    "            image = Image.open(picture)\n",
    "            img_array = np.array(image)\n",
    "            \n",
    "            # Mock face detection (in real app we'd use face_recognition)\n",
    "            face_locations = detect_faces(img_array)\n",
    "            \n",
    "            if face_locations:\n",
    "                # Draw rectangle around face (simple visualization)\n",
    "                img_with_face = img_array.copy()\n",
    "                for (top, right, bottom, left) in face_locations:\n",
    "                    # Draw rectangle (simplified - might not work on all images)\n",
    "                    try:\n",
    "                        cv2.rectangle(img_with_face, (left, top), (right, bottom), (0, 255, 0), 2)\n",
    "                        st.image(img_with_face, caption=\"Face Detected\", width=300)\n",
    "                    except:\n",
    "                        st.image(img_array, caption=\"Face Detected\", width=300)\n",
    "                \n",
    "                # Mock face comparison\n",
    "                matches = compare_faces(st.session_state.id_encoding, \"live_encoding\")\n",
    "                face_distance_value = face_distance(st.session_state.id_encoding, \"live_encoding\")\n",
    "                \n",
    "                # Store verification result\n",
    "                verification_time = datetime.datetime.now()\n",
    "                verification_result = matches[0]\n",
    "                confidence = 1 - float(face_distance_value[0])\n",
    "                confidence_percentage = f\"{confidence * 100:.2f}%\"\n",
    "                \n",
    "                # Save to history\n",
    "                history_entry = {\n",
    "                    \"timestamp\": verification_time.strftime(\"%Y-%m-%d %H:%M:%S\"),\n",
    "                    \"name\": st.session_state.name,\n",
    "                    \"id_number\": st.session_state.id_number,\n",
    "                    \"result\": \"Success\" if verification_result else \"Failed\",\n",
    "                    \"confidence\": confidence_percentage\n",
    "                }\n",
    "                \n",
    "                st.session_state.verification_history.append(history_entry)\n",
    "                \n",
    "                if verification_result:\n",
    "                    success_html = f\"\"\"\n",
    "                    <div class=\"success-message\">\n",
    "                        <h3>✅ Verification Successful!</h3>\n",
    "                        <p>Face matches ID with {confidence_percentage} confidence.</p>\n",
    "                        <p><b>Name:</b> {st.session_state.name}<br>\n",
    "                        <b>ID:</b> {st.session_state.id_number}<br>\n",
    "                        <b>Verified at:</b> {verification_time.strftime(\"%Y-%m-%d %H:%M:%S\")}</p>\n",
    "                    </div>\n",
    "                    \"\"\"\n",
    "                    st.markdown(success_html, unsafe_allow_html=True)\n",
    "                else:\n",
    "                    error_html = f\"\"\"\n",
    "                    <div class=\"error-message\">\n",
    "                        <h3>❌ Verification Failed!</h3>\n",
    "                        <p>Face does not match ID. Confidence: {confidence_percentage}</p>\n",
    "                        <p>Please try again or contact support if you believe this is an error.</p>\n",
    "                    </div>\n",
    "                    \"\"\"\n",
    "                    st.markdown(error_html, unsafe_allow_html=True)\n",
    "            else:\n",
    "                st.error(\"No face detected in the captured image. Please ensure your face is clearly visible and try again.\")\n",
    "\n",
    "# Verification history page\n",
    "def show_history():\n",
    "    st.header(\"Verification History\")\n",
    "    \n",
    "    if 'verification_history' not in st.session_state or not st.session_state.verification_history:\n",
    "        st.info(\"No verification history available yet. Complete a verification to see records here.\")\n",
    "        return\n",
    "    \n",
    "    # Display history in a table\n",
    "    history = st.session_state.verification_history\n",
    "    \n",
    "    # Create a DataFrame\n",
    "    df = pd.DataFrame(history)\n",
    "    \n",
    "    # Display with coloring based on result\n",
    "    st.dataframe(df)\n",
    "    \n",
    "    # Option to clear history\n",
    "    if st.button(\"Clear History\"):\n",
    "        st.session_state.verification_history = []\n",
    "        st.success(\"History cleared successfully!\")\n",
    "        st.experimental_rerun()\n",
    "\n",
    "# Route to the right page based on selection\n",
    "if app_mode == \"Home\":\n",
    "    show_home()\n",
    "elif app_mode == \"Upload ID\":\n",
    "    upload_id()\n",
    "elif app_mode == \"Verify Identity\":\n",
    "    verify_identity()\n",
    "elif app_mode == \"Verification History\":\n",
    "    show_history()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
